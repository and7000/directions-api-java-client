/*
 * GraphHopper Directions API
 * You use the GraphHopper Directions API to add route planning, navigation and route optimization to your software. E.g. the Routing API has turn instructions and elevation data and the Route Optimization API solves your logistic problems and supports various constraints like time window and capacity restrictions. Also it is possible to get all distances between all locations with our fast Matrix API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.graphhopper.directions.api.client.api;

import com.graphhopper.directions.api.client.ApiCallback;
import com.graphhopper.directions.api.client.ApiClient;
import com.graphhopper.directions.api.client.ApiException;
import com.graphhopper.directions.api.client.ApiResponse;
import com.graphhopper.directions.api.client.Configuration;
import com.graphhopper.directions.api.client.Pair;
import com.graphhopper.directions.api.client.ProgressRequestBody;
import com.graphhopper.directions.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.graphhopper.directions.api.client.model.GHError;
import com.graphhopper.directions.api.client.model.GHIsochroneResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IsochroneApi {
    private ApiClient apiClient;

    public IsochroneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IsochroneApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for isochroneGet */
    private com.squareup.okhttp.Call isochroneGetCall(String point, String key, Integer timeLimit, Integer distanceLimit, String vehicle, Integer buckets, Boolean reverseFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/isochrone".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (point != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "point", point));
        if (timeLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "time_limit", timeLimit));
        if (distanceLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance_limit", distanceLimit));
        if (vehicle != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "vehicle", vehicle));
        if (buckets != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "buckets", buckets));
        if (reverseFlow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "reverse_flow", reverseFlow));
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "key", key));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call isochroneGetValidateBeforeCall(String point, String key, Integer timeLimit, Integer distanceLimit, String vehicle, Integer buckets, Boolean reverseFlow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'point' is set
        if (point == null) {
            throw new ApiException("Missing the required parameter 'point' when calling isochroneGet(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling isochroneGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = isochroneGetCall(point, key, timeLimit, distanceLimit, vehicle, buckets, reverseFlow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Isochrone Request
     * The GraphHopper Isochrone API allows calculating an isochrone of a locations means to calculate &#39;a line connecting points at which a vehicle arrives at the same time,&#39; see [Wikipedia](http://en.wikipedia.org/wiki/Isochrone_map). It is also called **reachability** or **walkability**. 
     * @param point Specify the start coordinate (required)
     * @param key Get your key at graphhopper.com (required)
     * @param timeLimit Specify which time the vehicle should travel. In seconds. (optional, default to 600)
     * @param distanceLimit Specify which distance the vehicle should travel. In meter. (optional, default to -1)
     * @param vehicle Possible vehicles are bike, car, foot and [more](https://graphhopper.com/api/1/docs/supported-vehicle-profiles/) (optional, default to car)
     * @param buckets For how many sub intervals an additional polygon should be calculated. (optional, default to 1)
     * @param reverseFlow If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example usage for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.* (optional, default to false)
     * @return GHIsochroneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GHIsochroneResponse isochroneGet(String point, String key, Integer timeLimit, Integer distanceLimit, String vehicle, Integer buckets, Boolean reverseFlow) throws ApiException {
        ApiResponse<GHIsochroneResponse> resp = isochroneGetWithHttpInfo(point, key, timeLimit, distanceLimit, vehicle, buckets, reverseFlow);
        return resp.getData();
    }

    /**
     * Isochrone Request
     * The GraphHopper Isochrone API allows calculating an isochrone of a locations means to calculate &#39;a line connecting points at which a vehicle arrives at the same time,&#39; see [Wikipedia](http://en.wikipedia.org/wiki/Isochrone_map). It is also called **reachability** or **walkability**. 
     * @param point Specify the start coordinate (required)
     * @param key Get your key at graphhopper.com (required)
     * @param timeLimit Specify which time the vehicle should travel. In seconds. (optional, default to 600)
     * @param distanceLimit Specify which distance the vehicle should travel. In meter. (optional, default to -1)
     * @param vehicle Possible vehicles are bike, car, foot and [more](https://graphhopper.com/api/1/docs/supported-vehicle-profiles/) (optional, default to car)
     * @param buckets For how many sub intervals an additional polygon should be calculated. (optional, default to 1)
     * @param reverseFlow If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example usage for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.* (optional, default to false)
     * @return ApiResponse&lt;GHIsochroneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GHIsochroneResponse> isochroneGetWithHttpInfo(String point, String key, Integer timeLimit, Integer distanceLimit, String vehicle, Integer buckets, Boolean reverseFlow) throws ApiException {
        com.squareup.okhttp.Call call = isochroneGetValidateBeforeCall(point, key, timeLimit, distanceLimit, vehicle, buckets, reverseFlow, null, null);
        Type localVarReturnType = new TypeToken<GHIsochroneResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Isochrone Request (asynchronously)
     * The GraphHopper Isochrone API allows calculating an isochrone of a locations means to calculate &#39;a line connecting points at which a vehicle arrives at the same time,&#39; see [Wikipedia](http://en.wikipedia.org/wiki/Isochrone_map). It is also called **reachability** or **walkability**. 
     * @param point Specify the start coordinate (required)
     * @param key Get your key at graphhopper.com (required)
     * @param timeLimit Specify which time the vehicle should travel. In seconds. (optional, default to 600)
     * @param distanceLimit Specify which distance the vehicle should travel. In meter. (optional, default to -1)
     * @param vehicle Possible vehicles are bike, car, foot and [more](https://graphhopper.com/api/1/docs/supported-vehicle-profiles/) (optional, default to car)
     * @param buckets For how many sub intervals an additional polygon should be calculated. (optional, default to 1)
     * @param reverseFlow If &#x60;false&#x60; the flow goes from point to the polygon, if &#x60;true&#x60; the flow goes from the polygon \&quot;inside\&quot; to the point. Example usage for &#x60;false&#x60;&amp;#58; *How many potential customer can be reached within 30min travel time from your store* vs. &#x60;true&#x60;&amp;#58; *How many customers can reach your store within 30min travel time.* (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call isochroneGetAsync(String point, String key, Integer timeLimit, Integer distanceLimit, String vehicle, Integer buckets, Boolean reverseFlow, final ApiCallback<GHIsochroneResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = isochroneGetValidateBeforeCall(point, key, timeLimit, distanceLimit, vehicle, buckets, reverseFlow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GHIsochroneResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
